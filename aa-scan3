#!/usr/bin/env python3

import collections
import itertools
import logging
import os
import re
import sys

import aa_scan3.utils
import aa_scan3.plugins

description = """
aa-scan3 parses the file passed in parameter, and generates an
AppArmor profile for it. The file must be a fully-qualified path,
but relative to the target root directory (see options, below).
"""

plugins_description = """
aa-scan3 is plugins-based. The file to scan is passed to each plugin
in turn, and if the plugin knows how to scan that file, it will do
so and emit (part of) a profile; if a plugin does not know how to
handle a file, it just ignores it.
"""

epilog = """
See also the following resources:
    apparmor(7), apparmor.d(5), apparmor_parser(8),
    and the AppArmor Wiki <http://wiki.apparmor.net>
"""


def main():
    def dir_exists(d):
        if not os.path.isdir(d):
            parser.error('no such directory: {!r}'.format(d))
        return os.path.abspath(d)

    parser = aa_scan3.utils.AAScanArgParser(description=description, epilog=epilog,
                                            usage='%(prog)s [options [...] FILE | --help]')

    parser.add_argument('--root-dir', '-r', metavar='DIR', required=True, type=dir_exists,
                        help='Treat DIR as the target root directory')
    parser.add_argument('--staging-dir', '-s', metavar='DIR', required=True, type=dir_exists,
                        help='Treat DIR as the staging (aka sysroot) directory')
    parser.add_argument('--output-file', '-o', metavar='FILE',
                        help='Emit the profile in FILE; default is to emit on stdout')
    parser.add_argument('--enforce', '--complain', default='--enforce',
                        action=aa_scan3.utils.AAScanArgParser.ToggleAction(['--enforce']),
                        help='Set profiles in enforced or complain mode, respectively.')
    parser.add_argument('--debug', action='store_true',
                        help='Generate a lot of debugging information.')
    parser.add_argument('file', metavar='FILE',
                        help='The file to scan and generate an AppArmor profile for')

    # Hack: option group with no arg, just to have a nice
    # introduction to plugins
    parser.add_argument_group('PLUGINS', description=plugins_description)

    plugins = collections.defaultdict(dict)
    plugins_type = collections.defaultdict(set)
    for plugin in aa_scan3.plugins.plugins:
        p = aa_scan3.plugins.plugins[plugin]
        plugins[plugin]['type'] = set()
        if "once" in dir(p.Scanner):
            plugins[plugin]['type'].add("scan")
            plugins_type['once'].add(plugin)
        if "scan" in dir(p.Scanner):
            plugins[plugin]['type'].add("scan")
            plugins_type['scan'].add(plugin)
        if "mangle" in dir(p.Scanner):
            plugins[plugin]['type'].add("mangle")
            plugins_type['mangle'].add(plugin)
        if "emit" in dir(p.Scanner):
            plugins[plugin]['type'].add("mangle")
            plugins_type['emit'].add(plugin)
        if len(plugins[plugin]['type']) == 0:
            raise NotImplementedError('Plugin {} is neither scan nor mangle'.format(plugin))

    for plugin in sorted(plugins):
        p = aa_scan3.plugins.plugins[plugin]
        group = parser.add_argument_group(title='Plugin {} [{}]'.format(plugin,
                                                                        ', '.join(plugins[plugin]['type'])),
                                          description=p.__doc__)
        plugins[plugin]["scanner"] = p.Scanner(aa_scan3.utils.AAScanArgParser._ArgGroupPlugin(plugin,
                                                                                              group))

    args = parser.parse_args()

    def _mangle_path(path):
        for p in plugins_type['mangle']:
            logging.debug('Running mangle on {}'.format(path))
            _path = plugins[p]["scanner"].mangle(path)
            if _path != path:
                logging.debug('Replacing {} with {}'.format(path, _path))
            path = _path
        return re.sub('/+', '/', path)

    profile = aa_scan3.utils.AAprofile(args.file, _mangle_path)

    logging.basicConfig(stream=sys.stdout, format='%(message)s',
                        level=logging.DEBUG if args.debug else logging.WARNING)

    base_args = ['root_dir', 'staging_dir']
    for plugin in plugins:
        setattr(plugins[plugin]["scanner"], 'profile', profile)
        setattr(plugins[plugin]["scanner"], 'logger', aa_scan3.utils.AALogger(plugin))
        for arg in base_args:
            setattr(plugins[plugin]["scanner"], arg, getattr(args, arg))
        for arg in [a for a in dir(args) if a.startswith(plugin+'_')]:
            setattr(plugins[plugin]["scanner"], arg[len(plugin)+1:], getattr(args, arg))

    scan_files = {args.file}
    for p in plugins_type['once']:
        logging.debug('Running {}.once on {}'.format(p, args.file))
        _f = plugins[p]['scanner'].once(args.file)
        _f and logging.debug('Adding files {}'.format(_f))
        scan_files.update(_f)

    all_files = set()
    while scan_files:
        logging.debug('----')
        logging.debug('New scan loop with {}'.format(scan_files))
        to_scan = set()
        for f, p in itertools.product(scan_files, plugins_type['mangle']):
            logging.debug('Running {}.mangle on {}'.format(p, f))
            _f = plugins[p]["scanner"].mangle(f)
            if _f != f:
                logging.debug('Replacing {} with {}'.format(f, _f))
                f = _f
            to_scan.add(f)

        # Only keep those not already scanned
        to_scan.difference_update(all_files)
        # ... and add them to the list
        all_files.update(to_scan)

        scan_files = set()
        for f, p in itertools.product(to_scan, plugins_type['scan']):
            logging.debug('Running {}.scan on {}'.format(p, f))
            _f = plugins[p]["scanner"].scan(f)
            if _f:
                logging.debug('Adding files {}'.format(_f))
            scan_files.update(_f)


if __name__ == "__main__":
    main()
